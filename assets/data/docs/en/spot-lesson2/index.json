{"hash":"3aa1b8aa9caf58cbeba50c33c0423bd52edd468c","data":{"doc":{"id":"7913917deb4dce48f681d8d385a7d7d1","title":"Lesson 2. Robot Command Service","contributors":["LoSk-p"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Requirements","anchor":"#requirements"},{"depth":2,"value":"Documentation","anchor":"#documentation"},{"depth":2,"value":"Task","anchor":"#task"}],"content":"\nIn the second lesson you will learn how to use Spot Command services and walk with Spot.\n\n## Requirements\n\nBefore this lesson go through [Lesson 0](/docs/spot-lesson0) to setup your connection (if you haven't done it before).\n\n> Don't forget to run Yggdrasil if you use macOS:\n> ```bash\n> sudo yggdrasil -useconffile /etc/yggdrasil.conf\n> ```\n\n## Documentation\n\nTo control Spot with `Robot Command Service` you firstly need to build command. Spot SDK has RobotCommandBuilder class for it. Full list of methods and its descriprions you can find [here](https://github.com/boston-dynamics/spot-sdk/blob/7ce5c5f31f4e1e45e9ff4be29fb097e258b75919/python/bosdyn-client/src/bosdyn/client/robot_command.py#L593). \n\nIn this lesson you may need to use:\n\n* Stand Command\n```python\ndef stand_command(params=None, body_height=0.0, \n                footprint_R_body=geometry.EulerZXY())\n```\n\n* Go to point\n\n```python\ndef synchro_se2_trajectory_point_command(goal_x, goal_y, goal_heading,      \n                                    frame_name, params=None,\n                                    body_height=0.0,\n                                    locomotion_hint=spot_command_pb2.HINT_AUTO,\n                                    build_on_command=None)\n```\nThe example of use [here](https://github.com/boston-dynamics/spot-sdk/blob/master/python/examples/frame_trajectory_command/frame_trajectory_command.py).\n\n* Velocity Command\n\n```python\ndef synchro_velocity_command(v_x, v_y, v_rot, params=None, body_height=0.0,\n                            locomotion_hint=spot_command_pb2.HINT_AUTO, \n                            frame_name=BODY_FRAME_NAME)\n```\n\n* Stance Command\n\n```python\ndef stance_command(se2_frame_name, pos_fl_rt_frame, pos_fr_rt_frame, \n                        pos_hl_rt_frame,\n                        pos_hr_rt_frame, accuracy=0.05, \n                        params=None, body_height=0.0,\n                        footprint_R_body=geometry.EulerZXY(), \n                        build_on_command=None)\n```\nThe example of use is [here](https://github.com/boston-dynamics/spot-sdk/blob/91ed30607264e795699995d6d7834ba0c8a94d36/python/examples/stance/stance_in_place.py)\n\n* Pose to change battery\n\n```python\ndef battery_change_pose_command(dir_hint=1)\n```\n\nExample of building and running velocity command:\n\n```python\nfrom bosdyn.client.robot_command import RobotCommandClient, RobotCommandBuilder\nimport time\n\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\ncmd = RobotCommandBuilder.velocity_command(0.5, 0, 0.5)\ncommand_client.robot_command(cmd, end_time_secs=time.time() + 2)\n```\n\n## Task\n\nYou will have a list of points with their local coordinates in the `lessons` directory and you need to make Spot go through theese points. The origin of the local coordinates is in the place where Spot was turned on. Spot must do one of moves in each point and they should not be repeated. \n\nThe list of moves: \n* To go sideways to point\n* To turn around himself\n* To lie down in pose to change battery\n* To nod\n* To change the stance of robot's legs\n\n> You can find Spot local coordinates with:\n> ```python\n> get_vision_tform_body(robot_state_client.get_robot_state().kinematic_state.transforms_snapshot)\n> ```"}},"context":{}}